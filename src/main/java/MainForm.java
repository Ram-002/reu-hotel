import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.time.LocalDate;

public class MainForm extends JFrame {
    private JTable roomsTable;
    private JTable occupiesTable;
    private JPanel rootPanel;
    private JButton getButton;
    private JButton commitButton;
    private JButton addRoomButton;
    private JButton removeRoomButton;
    private JButton addOccupiedButton;
    private JButton removeOccupiedButton;

    Rooms rooms = new Rooms();
    Occupies occupies = new Occupies();

    public MainForm() throws HeadlessException, SQLException {
        setContentPane(rootPanel);
        setVisible(true);
        setSize(800, 600);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        rooms.pull();
        roomsTable.setModel(rooms);

        occupies.pull();
        occupiesTable.setModel(occupies);

        getButton.addActionListener(e -> {
            try {
                rooms.pull();
            } catch (SQLException ex) {
                throw new RuntimeException(ex);
            }
        });

        addRoomButton.addActionListener(e -> {
            rooms.rooms.add(new Rooms.Room(rooms.getMaxId() + 1, 0, 0));
            rooms.fireTableDataChanged();
        });

        addOccupiedButton.addActionListener(e -> {
            occupies.occupied.add(new Occupies.Occupied(
                    occupies.getMaxId() + 1,
                    LocalDate.now(),
                    LocalDate.now().plusDays(1),
                    "",
                    0
            ));
            occupies.fireTableDataChanged();
        });

        removeRoomButton.addActionListener(e -> {
            var row = roomsTable.getSelectedRow();
            if (row >= 0) {
                rooms.rooms.remove(row);
                rooms.fireTableDataChanged();
            }
        });

        removeOccupiedButton.addActionListener(e -> {
            var row = occupiesTable.getSelectedRow();
            if (row >= 0) {
                occupies.occupied.remove(row);
                occupies.fireTableDataChanged();
            }
        });

        commitButton.addActionListener(e -> {
            rooms.push();
            occupies.push();
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
        getButton = new JButton();
        getButton.setText("Get");
        rootPanel.add(getButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(0, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        roomsTable = new JTable();
        scrollPane1.setViewportView(roomsTable);
        final JScrollPane scrollPane2 = new JScrollPane();
        rootPanel.add(scrollPane2, new GridConstraints(0, 2, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        occupiesTable = new JTable();
        scrollPane2.setViewportView(occupiesTable);
        commitButton = new JButton();
        commitButton.setText("Commit");
        rootPanel.add(commitButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addRoomButton = new JButton();
        addRoomButton.setText("Add room");
        rootPanel.add(addRoomButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeRoomButton = new JButton();
        removeRoomButton.setText("Remove room");
        rootPanel.add(removeRoomButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addOccupiedButton = new JButton();
        addOccupiedButton.setText("Add occupied");
        rootPanel.add(addOccupiedButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeOccupiedButton = new JButton();
        removeOccupiedButton.setText("Remove occupied");
        rootPanel.add(removeOccupiedButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
